Given a binary search tree, write a function to find the kth smallest element in the tree.

Question Link :-https://www.interviewbit.com/problems/kth-smallest-element-in-tree/

Example :

Input : 
  2
 / \
1   3

and k = 2

Return : 2

As 2 is the second smallest element in the tree.
 NOTE : You may assume 1 <= k <= Total number of nodes in BST 
 
 
 
 
Solution:-
 
 STEPS:
 1.perform inorder traversal
 2.maintain a counter , inc or dec till kth or from kth count.
 3.Solution element is d one where kth == k(during inc) or kth ==0(during dec).
 
 
 
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 
 void helper_func(TreeNode* root, int B,int*kth ,int*soln)
 {
     if(root)
     {
         
         helper_func( root->left,B ,kth,soln);
         (*kth) = (*kth)-1;        // counter decreses upon traversal in inorder.
           if( (*kth) == 0)
           {
            (*soln) = root->val ;  // Elemnet that preserves solution
           }
        
         helper_func( root->right,B,kth,soln);
     }
     
 }
 
int Solution::kthsmallest(TreeNode* root, int B) 
{
    int kth = B;   // kth act as counter
    int soln =-1;   // -1 if soln not found 
    helper_func( root,B,&kth,&soln);
    return soln;
    
}
