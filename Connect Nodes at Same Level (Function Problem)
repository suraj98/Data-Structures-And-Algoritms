Write a function to connect all the adjacent nodes at the same level in a binary tree. Structure of the given Binary Tree node is like following.

Link:-https://practice.geeksforgeeks.org/problems/connect-nodes-at-same-level/1/?ref=self
 
struct Node{

  int data;

  Node* left;

  Node* right;

  Node* nextRight; 

}


Initially, all the nextRight pointers point to garbage values. Your function should set these pointers to point next right for each node.

Example:

Input Tree
       10
      / \
     3   5
    / \   \
   4   1   2


Output Tree
       10--->NULL
      / \
     3-->5-->NULL
    / \   \   
   4-->1-->2-->NULL
 
Constraints:
1 <=T<= 30
1 <=Number of nodes<= 100
1 <=Data of a node<= 1000

Example:
Input:
2
2
3 1 L 3 2 R
4
10 20 L 10 30 R 20 40 L 20 60 R

Output:
3 1 2
1 3 2
10 20 30 40 60
40 20 60 10 30

Solution:-

Algo:-
1.We perform BFS.
2.Calculte breadth at each level and decrease it while popping element from queue
3.when queue breadth-1 == 0 , node->nextRight == NULL.
4.Else popped_node->nextRight = front_node of queue.


/* struct Node
{
  int data;
  Node *left, *right;
  Node *nextRight;  // This has garbage value in input trees
}; */

// Should set the nextRight for all nodes
void connect(Node *p)
{
    queue<Node*>q;
   if(p)
   {
       q.push(p);
       while(!q.empty())
       {
           int breadth_size = q.size();
           Node* temp;
           while( (breadth_size-1)!=0 )
           {
               
            temp = q.front();
            q.pop();
                temp->nextRight = q.front();
                if(tenp->left)
                {
                   q.push(tenp->left);
                }
                if(temp->right)
                {
                    q.push(temp->right);
                }
           
           breath_size--;
           }
 
           temp = q.front() ;
           temp->nextRight=NULL;
           q.pop();
           if(temp->left)
           {
               q.push(temp->left);
           }
           if(temp->right)
           {
               q.push(temp->right);
           }   
       }
   }
}



